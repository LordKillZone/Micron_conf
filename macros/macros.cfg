[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    Path where the processed results will be stored. If the folder doesn't exist,
#    it will be automatically created. You can change this if you'd like to store 
#    results in a different location.
number_of_results_to_keep: 10
#    This setting defines how many results you want to keep in the result folder.
#    Once the specified number is exceeded, older results will be automatically deleted
#    to free up space on the SD card and avoid cluttering the results folder.
# keep_raw_data: False
#    If set to True, Shake&Tune will store both the processed graphs and the raw accelerometer
#    .stdata files in the results folder. This can be useful for debugging or archiving purposes.
#    Please always attach them when reporting any issues on GitHub or Discord.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for system commands (macros that are not part
#    of the printer.cfg file). This option allow Shake&Tune to inject them into the webui at runtime.
#    If set to False, the macros will be hidden but still accessible from the console by typing
#    their names manually, which can be useful if you prefer to encapsulate them into your own macros.
timeout: 600
#    This defines the maximum processing time (in seconds) to allows to Shake&Tune for generating 
#    graphs from a .stdata file. 10 minutes should be more than enough in most cases, but if you have
#    slower hardware (e.g., older SD cards or low-performance devices), increase it to prevent timeouts.
measurements_chunk_size: 4
#    Each Shake&Tune command uses the accelerometer to take multiple measurements. By default,
#    Shake&Tune will write a chunk of data to disk every two measurements, and at the end of the
#    command will merge these chunks into the final .stdata file for processing. "2" is a very
#    conservative setting to avoid Klipper Timer Too Close errors on lower end devices with little
#    RAM, and should work for everyone. However, if you are using a powerful computer, you may
#    wish to increase this value to keep more measurements in memory (e.g., 15-20) before writing
#    the chunk and avoid stressing the filesystem too much.
max_freq: 200
#    This setting defines the maximum frequency at which the calculation of the power spectral density
#    is cutoff. The default value should be fine for most machines and accelerometer combinations and
#    avoid touching it unless you know what you're doing.
dpi: 300
#    Controls the resolution of the generated graphs. The default value of 300 dpi was optimized
#    and strikes a balance between performance and readability, ensuring that graphs are clear
#    without using too much RAM to generate them. Usually, you shouldn't need to change this value.

[gcode_macro PRIME]
gcode:
    g90
    {% set th = printer.toolhead %}
    G1 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z60 F18000

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[filament_switch_sensor switch_sensor]
switch_pin: ^PG12
pause_on_runout: True
runout_gcode:
 PAUSE # [pause_resume] is required in printer.cfg
 M117 Filament switch runout
 SET_DISPLAY_TEXT MSG="Filament switch runout"
insert_gcode:
 M117 Filament switch inserted
 SET_DISPLAY_TEXT MSG="Printer goes brrrrr"

 
[filament_motion_sensor encoder_sensor]
switch_pin: ^PG13
detection_length: 3.5 # accuracy of motion sensor 2.88mm
extruder: extruder
pause_on_runout: False
runout_gcode:
 PAUSE # [pause_resume] is required in printer.cfg
 M117 Filament encoder runout
 SET_DISPLAY_TEXT MSG="Filament encoder runout"
insert_gcode:
 M117 Filament encoder inserted
 SET_DISPLAY_TEXT MSG="Printer goes brrrrr"

[gcode_macro RODI]
gcode:
    G91
    M83
    G1 E100 F60
    G90



[gcode_macro TEST]
gcode:
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000

[gcode_macro TEST_belt]
gcode:
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X5 Y1 F21000
    G1 X5 Y178 F21000
    G1 X175 Y1 F21000
    G1 X175 Y178 F21000
    G1 X175 Y1 F21000
    G1 X5 Y178 F21000
    G1 X5 Y1 F21000
    G1 X5 Y178 F21000
    G1 X175 Y1 F21000
    G1 X5 Y178 F21000
    G1 X175 Y1 F21000
    G1 X175 Y178 F21000
    G1 X5 Y90 F21000
    G1 X175 Y90 F21000
    G1 X90 Y160 F21000

[gcode_macro LUBE_Z]
gcode:
    G1 Z5 F18000
    G1 Z100 F18000
    G1 Z5 F18000
    G1 Z100 F18000
    G1 Z5 F18000
    G1 Z100 F18000
    G1 Z5 F18000
    G1 Z100 F18000
    G1 Z5 F18000
    G1 Z100 F18000
    G1 Z5 F18000
    G1 Z100 F18000
    G1 Z50 F18000


[gcode_macro SET_IDLE_TIMEOUT_MINUTES]
description: Ustawia timeout bezczynności w minutach
gcode:
    {% set minutes = params.MINUTES|default(30)|int %}
    {% set timeout_seconds = minutes * 60 %}
    SET_IDLE_TIMEOUT TIMEOUT={timeout_seconds}



[gcode_shell_command cpufreq_set]
command: sh -c "sudo /usr/bin/cpufreq-set -g $0"
timeout: 5.0
verbose: True



[gcode_macro _cpufreq_set]
description: set cpu governor
gcode:
  {% set governor = params.GOVERNOR|default("performance") %}
  RESPOND MSG='{"CPU set to %s" % (governor)}'
  RUN_SHELL_COMMAND CMD=cpufreq_set PARAMS={governor}


[gcode_macro PURGE_FILAMENT]
description: Ustawia TEMP, czeka, wykonuje purge i retrakcję, potem ustawia 150°C
gcode:
    {% if "TEMP" not in params %}
        RESPOND PREFIX="PURGE_FILAMENT" MSG="Musisz podać TEMP, np. PURGE_FILAMENT TEMP=220"
        CANCEL_MACRO
    {% endif %}
    
    M109 S{params.TEMP}

    M83
    _CLIENT_LINEAR_MOVE E=60 F=360
    G4 P0
    _CLIENT_LINEAR_MOVE E=-6 F=360
    G4 P0

    M104 S150


[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 15.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 15.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 0.6   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 30.0  ; retract speed in mm/s
variable_unretract        : 0.6   ; the value to unretract while RESUME
variable_speed_unretract  : 30.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 250.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 3600   ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "SET_LED LED=LED RED=1 GREEN=0 BLUE=0"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "LED_ALL_SUN"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:
