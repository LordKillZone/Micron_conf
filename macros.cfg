[gcode_macro PRIME]
gcode:
    g90
    g0 x90 y90 z60 f12000



[filament_switch_sensor switch_sensor]
switch_pin: ^PG12
pause_on_runout: True
runout_gcode:
 PAUSE # [pause_resume] is required in printer.cfg
 M117 Filament switch runout
 SET_DISPLAY_TEXT MSG="Filament switch runout"
insert_gcode:
 M117 Filament switch inserted
 SET_DISPLAY_TEXT MSG="Printer goes brrrrr"

 
[filament_motion_sensor encoder_sensor]
switch_pin: ^PG13
detection_length: 2.88 # accuracy of motion sensor 2.88mm
extruder: extruder
pause_on_runout: False
runout_gcode:
 PAUSE # [pause_resume] is required in printer.cfg
 M117 Filament encoder runout
 SET_DISPLAY_TEXT MSG="Filament encoder runout"
insert_gcode:
 M117 Filament encoder inserted
 SET_DISPLAY_TEXT MSG="Printer goes brrrrr"

[gcode_macro RODI]
gcode:
    G91
    M83
    G1 E100 F60
    G90



[gcode_macro TEST]
gcode:
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000
    G1 X90 Y1 F21000
    G1 X90 Y178 F21000


[gcode_macro SET_IDLE_TIMEOUT_MINUTES]
description: Ustawia timeout bezczynno≈õci w minutach
gcode:
    {% set minutes = params.MINUTES|default(30)|int %}
    {% set timeout_seconds = minutes * 60 %}
    SET_IDLE_TIMEOUT TIMEOUT={timeout_seconds}



[gcode_shell_command cpufreq_set]
command: sh -c "sudo /usr/bin/cpufreq-set -g $0"
timeout: 5.0
verbose: True



[gcode_macro _cpufreq_set]
description: set cpu governor
gcode:
  {% set governor = params.GOVERNOR|default("performance") %}
  RESPOND MSG='{"CPU set to %s" % (governor)}'
  RUN_SHELL_COMMAND CMD=cpufreq_set PARAMS={governor}

  

[gcode_macro M600]
#    description: Filament change
gcode:
  PAUSE X=10 Y=10 Z_MIN=50

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 15.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 15.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 25.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 25.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 250.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 3600   ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "SET_LED LED=LED RED=1 GREEN=0 BLUE=0"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "LED_ALL_SUN"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:
